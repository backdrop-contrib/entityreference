<?php

/**
 * Implements hook_field_schema().
 */
function entityreference_field_schema($field) {
  if ($field['type'] == 'entityreference') {
    // Load the base table configuration from the cache.
    $base_tables = state_get('entityreference_base_tables', array());

    $schema = array(
      'columns' => array(
        'target_id' => array(
          'description' => 'The id of the target entity.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
      ),
      'indexes' => array(
        'target_id' => array('target_id'),
      ),
      'foreign keys' => array(),
    );

    // Create a foreign key to the target entity type base type, if available.
    $entity_type = $field['settings']['target_type'];
    if (isset($base_tables[$entity_type])) {
      [$base_table, $id_column] = $base_tables[$entity_type];
      $schema['foreign keys'][$base_table] = array(
        'table' => $base_table,
        'columns' => array('target_id' => $id_column),
      );
    }

    // Invoke the behaviors to allow them to change the schema.
    module_load_include('module', 'entityreference');
    foreach (entityreference_get_behavior_handlers($field) as $handler) {
      $handler->schema_alter($schema, $field);
    }

    return $schema;
  }
}

/**
 * Move entityreference settings from config to state.
 */
function entityreference_update_1000() {
  $config = config('entityreference.settings');
  $base_tables = $config->get('base-tables');
  state_set('entityreference_base_tables', $base_tables);
  $config->delete();
}

/**
 * Updates each field base that references old ctools plugin 'views-select-list'.
 */
function entityreference_update_1001() {
  $fields = field_info_fields();

  foreach ($fields as $field) {
    if ($field['type'] == 'entityreference') {
      $blnConfigUpdated = FALSE;

      // Get the field base config.
      $config = config('field.field.' . $field['field_name']);
      $data = $config->get();

      // Update behaviors that have been changed or removed.
      $behaviors = &$data['settings']['handler_settings']['behaviors'];

      if (!empty($behaviors)) {
        $blnConfigUpdated = FALSE;

        // Behavior 'views-select-list' has been changed to 'views'.
        if (array_key_exists('views-select-list', $behaviors)) {
          $behaviors['views'] = $behaviors['views-select-list'];
          unset($behaviors['views-select-list']);

          $blnConfigUpdated = TRUE;
        }
      }

      // Save the new configuration if changes have been made.
      if ($blnConfigUpdated) {
        $config->setData($data);
        $config->save();
      }
    }
  }
}

/**
 * Updates each field instance that references old ctools plugin 'taxonomy-index'.
 */
function entityreference_update_1002() {
  $fieldBaseInfo = field_info_fields();
  $fieldInstanceInfo = field_info_instances();

  foreach ($fieldInstanceInfo as $fields) {
    foreach ($fields as $instances) {
      foreach ($instances as $instance) {
        $fieldName = $instance['field_name'];

        if ($fieldBaseInfo[$fieldName]['type'] == 'entityreference') {
          $blnConfigUpdated = FALSE;

          // Get the field instance config.
          $config = config('field.instance.' . $instance['entity_type'] . '.' . $instance['bundle'] . '.' . $instance['field_name']);
          $data = $config->get();

          // Update behaviors that have been changed or removed.
          $behaviors = &$data['settings']['behaviors'];

          if (!empty($behaviors)) {
            // Behavior 'taxonomy-index' has been changed to 'taxonomy'.
            if (array_key_exists('taxonomy-index', $behaviors)) {
              $behaviors['taxonomy'] = $behaviors['taxonomy-index'];
              unset($behaviors['taxonomy-index']);

              $blnConfigUpdated = TRUE;
            }
          }

          // Save the new configuration if changes have been made.
          if ($blnConfigUpdated) {
            $config->setData($data);
            $config->save();
          }
        }
      }
    }
  }
}
